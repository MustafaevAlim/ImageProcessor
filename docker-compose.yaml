services:
  backend:
    container_name: ImageProcessor
    build: 
      context: .
      dockerfile: Dockerfile.backend
    env_file:
      - .env
    expose:
      - "8080"
    depends_on:
      kafka:
        condition: service_started
      minio:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  kafka-init:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # Блокируем пока Kafka не будет готов
      echo 'Waiting for Kafka to be ready...'
      cub kafka-ready -b kafka:9092 1 30
      
      # Создаем топики
      echo 'Creating Kafka topics...'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic image-topic --replication-factor 1 --partitions 3
      
      
      # Проверяем созданные топики
      echo 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8081:8080"
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
  minio:
    container_name: minio
    image: 'minio/minio'
    volumes:
      - 'minio_data:/data'
    expose:
      - "9000"
      - "9001"
    command: server /data --console-address ":9001"
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_BROWSER_REDIRECT_URL: "http://localhost/minio/"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: imageprocessor_nginx
    ports:
      - "80:80"      
      - "443:443"    
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - minio
    restart: unless-stopped


volumes:
  minio_data:
