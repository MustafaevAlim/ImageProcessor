// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"ImageProcessor/internal/model"
	"context"
	"io"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockImageStore creates a new instance of MockImageStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageStore {
	mock := &MockImageStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockImageStore is an autogenerated mock type for the ImageStore type
type MockImageStore struct {
	mock.Mock
}

type MockImageStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageStore) EXPECT() *MockImageStore_Expecter {
	return &MockImageStore_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockImageStore
func (_mock *MockImageStore) Delete(ctx context.Context, objectName string) error {
	ret := _mock.Called(ctx, objectName)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, objectName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockImageStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockImageStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - objectName string
func (_e *MockImageStore_Expecter) Delete(ctx interface{}, objectName interface{}) *MockImageStore_Delete_Call {
	return &MockImageStore_Delete_Call{Call: _e.mock.On("Delete", ctx, objectName)}
}

func (_c *MockImageStore_Delete_Call) Run(run func(ctx context.Context, objectName string)) *MockImageStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockImageStore_Delete_Call) Return(err error) *MockImageStore_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockImageStore_Delete_Call) RunAndReturn(run func(ctx context.Context, objectName string) error) *MockImageStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function for the type MockImageStore
func (_mock *MockImageStore) Download(ctx context.Context, objectName string) (io.ReadCloser, error) {
	ret := _mock.Called(ctx, objectName)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return returnFunc(ctx, objectName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = returnFunc(ctx, objectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, objectName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageStore_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockImageStore_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - objectName string
func (_e *MockImageStore_Expecter) Download(ctx interface{}, objectName interface{}) *MockImageStore_Download_Call {
	return &MockImageStore_Download_Call{Call: _e.mock.On("Download", ctx, objectName)}
}

func (_c *MockImageStore_Download_Call) Run(run func(ctx context.Context, objectName string)) *MockImageStore_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockImageStore_Download_Call) Return(readCloser io.ReadCloser, err error) *MockImageStore_Download_Call {
	_c.Call.Return(readCloser, err)
	return _c
}

func (_c *MockImageStore_Download_Call) RunAndReturn(run func(ctx context.Context, objectName string) (io.ReadCloser, error)) *MockImageStore_Download_Call {
	_c.Call.Return(run)
	return _c
}

// GetManyURL provides a mock function for the type MockImageStore
func (_mock *MockImageStore) GetManyURL(ctx context.Context, images []model.ImageInRepo, expiry time.Duration) ([]string, error) {
	ret := _mock.Called(ctx, images, expiry)

	if len(ret) == 0 {
		panic("no return value specified for GetManyURL")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []model.ImageInRepo, time.Duration) ([]string, error)); ok {
		return returnFunc(ctx, images, expiry)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []model.ImageInRepo, time.Duration) []string); ok {
		r0 = returnFunc(ctx, images, expiry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []model.ImageInRepo, time.Duration) error); ok {
		r1 = returnFunc(ctx, images, expiry)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageStore_GetManyURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManyURL'
type MockImageStore_GetManyURL_Call struct {
	*mock.Call
}

// GetManyURL is a helper method to define mock.On call
//   - ctx context.Context
//   - images []model.ImageInRepo
//   - expiry time.Duration
func (_e *MockImageStore_Expecter) GetManyURL(ctx interface{}, images interface{}, expiry interface{}) *MockImageStore_GetManyURL_Call {
	return &MockImageStore_GetManyURL_Call{Call: _e.mock.On("GetManyURL", ctx, images, expiry)}
}

func (_c *MockImageStore_GetManyURL_Call) Run(run func(ctx context.Context, images []model.ImageInRepo, expiry time.Duration)) *MockImageStore_GetManyURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []model.ImageInRepo
		if args[1] != nil {
			arg1 = args[1].([]model.ImageInRepo)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockImageStore_GetManyURL_Call) Return(strings []string, err error) *MockImageStore_GetManyURL_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockImageStore_GetManyURL_Call) RunAndReturn(run func(ctx context.Context, images []model.ImageInRepo, expiry time.Duration) ([]string, error)) *MockImageStore_GetManyURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetURL provides a mock function for the type MockImageStore
func (_mock *MockImageStore) GetURL(ctx context.Context, image model.ImageInRepo) (string, error) {
	ret := _mock.Called(ctx, image)

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.ImageInRepo) (string, error)); ok {
		return returnFunc(ctx, image)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.ImageInRepo) string); ok {
		r0 = returnFunc(ctx, image)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.ImageInRepo) error); ok {
		r1 = returnFunc(ctx, image)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageStore_GetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURL'
type MockImageStore_GetURL_Call struct {
	*mock.Call
}

// GetURL is a helper method to define mock.On call
//   - ctx context.Context
//   - image model.ImageInRepo
func (_e *MockImageStore_Expecter) GetURL(ctx interface{}, image interface{}) *MockImageStore_GetURL_Call {
	return &MockImageStore_GetURL_Call{Call: _e.mock.On("GetURL", ctx, image)}
}

func (_c *MockImageStore_GetURL_Call) Run(run func(ctx context.Context, image model.ImageInRepo)) *MockImageStore_GetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.ImageInRepo
		if args[1] != nil {
			arg1 = args[1].(model.ImageInRepo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockImageStore_GetURL_Call) Return(s string, err error) *MockImageStore_GetURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockImageStore_GetURL_Call) RunAndReturn(run func(ctx context.Context, image model.ImageInRepo) (string, error)) *MockImageStore_GetURL_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function for the type MockImageStore
func (_mock *MockImageStore) Upload(ctx context.Context, file io.Reader, objectName string, size int64) error {
	ret := _mock.Called(ctx, file, objectName, size)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, io.Reader, string, int64) error); ok {
		r0 = returnFunc(ctx, file, objectName, size)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockImageStore_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockImageStore_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - file io.Reader
//   - objectName string
//   - size int64
func (_e *MockImageStore_Expecter) Upload(ctx interface{}, file interface{}, objectName interface{}, size interface{}) *MockImageStore_Upload_Call {
	return &MockImageStore_Upload_Call{Call: _e.mock.On("Upload", ctx, file, objectName, size)}
}

func (_c *MockImageStore_Upload_Call) Run(run func(ctx context.Context, file io.Reader, objectName string, size int64)) *MockImageStore_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 io.Reader
		if args[1] != nil {
			arg1 = args[1].(io.Reader)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int64
		if args[3] != nil {
			arg3 = args[3].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockImageStore_Upload_Call) Return(err error) *MockImageStore_Upload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockImageStore_Upload_Call) RunAndReturn(run func(ctx context.Context, file io.Reader, objectName string, size int64) error) *MockImageStore_Upload_Call {
	_c.Call.Return(run)
	return _c
}
