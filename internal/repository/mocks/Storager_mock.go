// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"ImageProcessor/internal/model"
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStorager creates a new instance of MockStorager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorager {
	mock := &MockStorager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorager is an autogenerated mock type for the Storager type
type MockStorager struct {
	mock.Mock
}

type MockStorager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorager) EXPECT() *MockStorager_Expecter {
	return &MockStorager_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockStorager
func (_mock *MockStorager) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStorager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStorager_Expecter) Close() *MockStorager_Close_Call {
	return &MockStorager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStorager_Close_Call) Run(run func()) *MockStorager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorager_Close_Call) Return(err error) *MockStorager_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorager_Close_Call) RunAndReturn(run func() error) *MockStorager_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateImage provides a mock function for the type MockStorager
func (_mock *MockStorager) CreateImage(ctx context.Context, img model.ImageInCreate) (int, error) {
	ret := _mock.Called(ctx, img)

	if len(ret) == 0 {
		panic("no return value specified for CreateImage")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.ImageInCreate) (int, error)); ok {
		return returnFunc(ctx, img)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.ImageInCreate) int); ok {
		r0 = returnFunc(ctx, img)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.ImageInCreate) error); ok {
		r1 = returnFunc(ctx, img)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorager_CreateImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateImage'
type MockStorager_CreateImage_Call struct {
	*mock.Call
}

// CreateImage is a helper method to define mock.On call
//   - ctx context.Context
//   - img model.ImageInCreate
func (_e *MockStorager_Expecter) CreateImage(ctx interface{}, img interface{}) *MockStorager_CreateImage_Call {
	return &MockStorager_CreateImage_Call{Call: _e.mock.On("CreateImage", ctx, img)}
}

func (_c *MockStorager_CreateImage_Call) Run(run func(ctx context.Context, img model.ImageInCreate)) *MockStorager_CreateImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.ImageInCreate
		if args[1] != nil {
			arg1 = args[1].(model.ImageInCreate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorager_CreateImage_Call) Return(n int, err error) *MockStorager_CreateImage_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStorager_CreateImage_Call) RunAndReturn(run func(ctx context.Context, img model.ImageInCreate) (int, error)) *MockStorager_CreateImage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteImage provides a mock function for the type MockStorager
func (_mock *MockStorager) DeleteImage(ctx context.Context, id int) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorager_DeleteImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteImage'
type MockStorager_DeleteImage_Call struct {
	*mock.Call
}

// DeleteImage is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockStorager_Expecter) DeleteImage(ctx interface{}, id interface{}) *MockStorager_DeleteImage_Call {
	return &MockStorager_DeleteImage_Call{Call: _e.mock.On("DeleteImage", ctx, id)}
}

func (_c *MockStorager_DeleteImage_Call) Run(run func(ctx context.Context, id int)) *MockStorager_DeleteImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorager_DeleteImage_Call) Return(err error) *MockStorager_DeleteImage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorager_DeleteImage_Call) RunAndReturn(run func(ctx context.Context, id int) error) *MockStorager_DeleteImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetCountImages provides a mock function for the type MockStorager
func (_mock *MockStorager) GetCountImages(ctx context.Context) (int, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCountImages")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorager_GetCountImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCountImages'
type MockStorager_GetCountImages_Call struct {
	*mock.Call
}

// GetCountImages is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorager_Expecter) GetCountImages(ctx interface{}) *MockStorager_GetCountImages_Call {
	return &MockStorager_GetCountImages_Call{Call: _e.mock.On("GetCountImages", ctx)}
}

func (_c *MockStorager_GetCountImages_Call) Run(run func(ctx context.Context)) *MockStorager_GetCountImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorager_GetCountImages_Call) Return(n int, err error) *MockStorager_GetCountImages_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStorager_GetCountImages_Call) RunAndReturn(run func(ctx context.Context) (int, error)) *MockStorager_GetCountImages_Call {
	_c.Call.Return(run)
	return _c
}

// GetImage provides a mock function for the type MockStorager
func (_mock *MockStorager) GetImage(ctx context.Context, id int) (model.ImageInRepo, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 model.ImageInRepo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (model.ImageInRepo, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) model.ImageInRepo); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(model.ImageInRepo)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorager_GetImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImage'
type MockStorager_GetImage_Call struct {
	*mock.Call
}

// GetImage is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockStorager_Expecter) GetImage(ctx interface{}, id interface{}) *MockStorager_GetImage_Call {
	return &MockStorager_GetImage_Call{Call: _e.mock.On("GetImage", ctx, id)}
}

func (_c *MockStorager_GetImage_Call) Run(run func(ctx context.Context, id int)) *MockStorager_GetImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorager_GetImage_Call) Return(imageInRepo model.ImageInRepo, err error) *MockStorager_GetImage_Call {
	_c.Call.Return(imageInRepo, err)
	return _c
}

func (_c *MockStorager_GetImage_Call) RunAndReturn(run func(ctx context.Context, id int) (model.ImageInRepo, error)) *MockStorager_GetImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetImages provides a mock function for the type MockStorager
func (_mock *MockStorager) GetImages(ctx context.Context, lastCreatedAt time.Time, lastID int, mode string) ([]model.ImageInRepo, error) {
	ret := _mock.Called(ctx, lastCreatedAt, lastID, mode)

	if len(ret) == 0 {
		panic("no return value specified for GetImages")
	}

	var r0 []model.ImageInRepo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, int, string) ([]model.ImageInRepo, error)); ok {
		return returnFunc(ctx, lastCreatedAt, lastID, mode)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, int, string) []model.ImageInRepo); ok {
		r0 = returnFunc(ctx, lastCreatedAt, lastID, mode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ImageInRepo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, int, string) error); ok {
		r1 = returnFunc(ctx, lastCreatedAt, lastID, mode)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorager_GetImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImages'
type MockStorager_GetImages_Call struct {
	*mock.Call
}

// GetImages is a helper method to define mock.On call
//   - ctx context.Context
//   - lastCreatedAt time.Time
//   - lastID int
//   - mode string
func (_e *MockStorager_Expecter) GetImages(ctx interface{}, lastCreatedAt interface{}, lastID interface{}, mode interface{}) *MockStorager_GetImages_Call {
	return &MockStorager_GetImages_Call{Call: _e.mock.On("GetImages", ctx, lastCreatedAt, lastID, mode)}
}

func (_c *MockStorager_GetImages_Call) Run(run func(ctx context.Context, lastCreatedAt time.Time, lastID int, mode string)) *MockStorager_GetImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStorager_GetImages_Call) Return(imageInRepos []model.ImageInRepo, err error) *MockStorager_GetImages_Call {
	_c.Call.Return(imageInRepos, err)
	return _c
}

func (_c *MockStorager_GetImages_Call) RunAndReturn(run func(ctx context.Context, lastCreatedAt time.Time, lastID int, mode string) ([]model.ImageInRepo, error)) *MockStorager_GetImages_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateImage provides a mock function for the type MockStorager
func (_mock *MockStorager) UpdateImage(ctx context.Context, img model.ImageInRepo) error {
	ret := _mock.Called(ctx, img)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.ImageInRepo) error); ok {
		r0 = returnFunc(ctx, img)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorager_UpdateImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateImage'
type MockStorager_UpdateImage_Call struct {
	*mock.Call
}

// UpdateImage is a helper method to define mock.On call
//   - ctx context.Context
//   - img model.ImageInRepo
func (_e *MockStorager_Expecter) UpdateImage(ctx interface{}, img interface{}) *MockStorager_UpdateImage_Call {
	return &MockStorager_UpdateImage_Call{Call: _e.mock.On("UpdateImage", ctx, img)}
}

func (_c *MockStorager_UpdateImage_Call) Run(run func(ctx context.Context, img model.ImageInRepo)) *MockStorager_UpdateImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.ImageInRepo
		if args[1] != nil {
			arg1 = args[1].(model.ImageInRepo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorager_UpdateImage_Call) Return(err error) *MockStorager_UpdateImage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorager_UpdateImage_Call) RunAndReturn(run func(ctx context.Context, img model.ImageInRepo) error) *MockStorager_UpdateImage_Call {
	_c.Call.Return(run)
	return _c
}
