// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"ImageProcessor/internal/model"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockImageTaskProducer creates a new instance of MockImageTaskProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageTaskProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageTaskProducer {
	mock := &MockImageTaskProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockImageTaskProducer is an autogenerated mock type for the ImageTaskProducer type
type MockImageTaskProducer struct {
	mock.Mock
}

type MockImageTaskProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageTaskProducer) EXPECT() *MockImageTaskProducer_Expecter {
	return &MockImageTaskProducer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockImageTaskProducer
func (_mock *MockImageTaskProducer) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockImageTaskProducer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockImageTaskProducer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockImageTaskProducer_Expecter) Close() *MockImageTaskProducer_Close_Call {
	return &MockImageTaskProducer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockImageTaskProducer_Close_Call) Run(run func()) *MockImageTaskProducer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockImageTaskProducer_Close_Call) Return(err error) *MockImageTaskProducer_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockImageTaskProducer_Close_Call) RunAndReturn(run func() error) *MockImageTaskProducer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type MockImageTaskProducer
func (_mock *MockImageTaskProducer) Publish(ctx context.Context, imgTask model.ImageTask) error {
	ret := _mock.Called(ctx, imgTask)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.ImageTask) error); ok {
		r0 = returnFunc(ctx, imgTask)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockImageTaskProducer_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockImageTaskProducer_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - imgTask model.ImageTask
func (_e *MockImageTaskProducer_Expecter) Publish(ctx interface{}, imgTask interface{}) *MockImageTaskProducer_Publish_Call {
	return &MockImageTaskProducer_Publish_Call{Call: _e.mock.On("Publish", ctx, imgTask)}
}

func (_c *MockImageTaskProducer_Publish_Call) Run(run func(ctx context.Context, imgTask model.ImageTask)) *MockImageTaskProducer_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.ImageTask
		if args[1] != nil {
			arg1 = args[1].(model.ImageTask)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockImageTaskProducer_Publish_Call) Return(err error) *MockImageTaskProducer_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockImageTaskProducer_Publish_Call) RunAndReturn(run func(ctx context.Context, imgTask model.ImageTask) error) *MockImageTaskProducer_Publish_Call {
	_c.Call.Return(run)
	return _c
}
