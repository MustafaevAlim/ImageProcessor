// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/segmentio/kafka-go"
	mock "github.com/stretchr/testify/mock"
)

// NewMockImageTaskConsumer creates a new instance of MockImageTaskConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageTaskConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageTaskConsumer {
	mock := &MockImageTaskConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockImageTaskConsumer is an autogenerated mock type for the ImageTaskConsumer type
type MockImageTaskConsumer struct {
	mock.Mock
}

type MockImageTaskConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageTaskConsumer) EXPECT() *MockImageTaskConsumer_Expecter {
	return &MockImageTaskConsumer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockImageTaskConsumer
func (_mock *MockImageTaskConsumer) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockImageTaskConsumer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockImageTaskConsumer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockImageTaskConsumer_Expecter) Close() *MockImageTaskConsumer_Close_Call {
	return &MockImageTaskConsumer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockImageTaskConsumer_Close_Call) Run(run func()) *MockImageTaskConsumer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockImageTaskConsumer_Close_Call) Return(err error) *MockImageTaskConsumer_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockImageTaskConsumer_Close_Call) RunAndReturn(run func() error) *MockImageTaskConsumer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CommitOffset provides a mock function for the type MockImageTaskConsumer
func (_mock *MockImageTaskConsumer) CommitOffset(ctx context.Context, img kafka.Message) error {
	ret := _mock.Called(ctx, img)

	if len(ret) == 0 {
		panic("no return value specified for CommitOffset")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, kafka.Message) error); ok {
		r0 = returnFunc(ctx, img)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockImageTaskConsumer_CommitOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitOffset'
type MockImageTaskConsumer_CommitOffset_Call struct {
	*mock.Call
}

// CommitOffset is a helper method to define mock.On call
//   - ctx context.Context
//   - img kafka.Message
func (_e *MockImageTaskConsumer_Expecter) CommitOffset(ctx interface{}, img interface{}) *MockImageTaskConsumer_CommitOffset_Call {
	return &MockImageTaskConsumer_CommitOffset_Call{Call: _e.mock.On("CommitOffset", ctx, img)}
}

func (_c *MockImageTaskConsumer_CommitOffset_Call) Run(run func(ctx context.Context, img kafka.Message)) *MockImageTaskConsumer_CommitOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 kafka.Message
		if args[1] != nil {
			arg1 = args[1].(kafka.Message)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockImageTaskConsumer_CommitOffset_Call) Return(err error) *MockImageTaskConsumer_CommitOffset_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockImageTaskConsumer_CommitOffset_Call) RunAndReturn(run func(ctx context.Context, img kafka.Message) error) *MockImageTaskConsumer_CommitOffset_Call {
	_c.Call.Return(run)
	return _c
}

// ConsumeTask provides a mock function for the type MockImageTaskConsumer
func (_mock *MockImageTaskConsumer) ConsumeTask(ctx context.Context, out chan<- kafka.Message) {
	_mock.Called(ctx, out)
	return
}

// MockImageTaskConsumer_ConsumeTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConsumeTask'
type MockImageTaskConsumer_ConsumeTask_Call struct {
	*mock.Call
}

// ConsumeTask is a helper method to define mock.On call
//   - ctx context.Context
//   - out chan<- kafka.Message
func (_e *MockImageTaskConsumer_Expecter) ConsumeTask(ctx interface{}, out interface{}) *MockImageTaskConsumer_ConsumeTask_Call {
	return &MockImageTaskConsumer_ConsumeTask_Call{Call: _e.mock.On("ConsumeTask", ctx, out)}
}

func (_c *MockImageTaskConsumer_ConsumeTask_Call) Run(run func(ctx context.Context, out chan<- kafka.Message)) *MockImageTaskConsumer_ConsumeTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 chan<- kafka.Message
		if args[1] != nil {
			arg1 = args[1].(chan<- kafka.Message)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockImageTaskConsumer_ConsumeTask_Call) Return() *MockImageTaskConsumer_ConsumeTask_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockImageTaskConsumer_ConsumeTask_Call) RunAndReturn(run func(ctx context.Context, out chan<- kafka.Message)) *MockImageTaskConsumer_ConsumeTask_Call {
	_c.Run(run)
	return _c
}
